import common_docking.py
#
# route spawn will call the specify label when something is spawned
# This allows the system to test what type of item it is
# typically using roles or other attributes
#
# NOTE: More than one route spawn can exist
#
route_spawn(handle_route_spawn)
build_task = None
#
# The route_spawn label is the entry point 
# it examines the SPAWNED_ID to either
# jump to another label proper for that item
# or END which stops running this task/flow 
#
========== handle_route_spawn =========

#
# AI for the player is the docking logic
#
jump ai_player if has_role(SPAWNED_ID, "__player__")
jump ai_task_friendly if has_roles(SPAWNED_ID, "tsn, friendly")
jump spawn_task_station if has_roles(SPAWNED_ID, "tsn, station")
jump raider_start if has_role(SPAWNED_ID, "raider")

#### ELSE don't run a task
->END

=====  ai_player =====

#
# Create the interior for the ship, defined in grid_ai
#
task_schedule(spawn_grid_objects)
#
# The remaining AI for the player is docking
#

schedule_player_docking(SPAWNED_ID, difficulty)
#
# With other tasks started end this one
#
->END



====== raider_start ======
# add a taunt trait

#
# Select 3 taunts
#
race = get_race(SPAWNED_ID)
jump task_npc_targeting if race is None


this_taunt_data = random.sample(taunt_data[race], 3)
set_inventory_value(SPAWNED_ID, "taunt_data", this_taunt_data)
set_inventory_value(SPAWNED_ID, "taunt_trait", random.randint(0,2))

## falls through # jump task_npc_targeting

#
# This is for enemy AI
# For now this is in priority
#  - if surrendered go back to the spawn point
#  - a player ship that comms enraged
#  - a player that is withing 2000
#  - or a stations
#
========== task_npc_targeting === 
enraged = get_inventory_value(SPAWNED_ID, "enrage_target")
scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
surrendered = has_role(SPAWNED_ID, "surrendered")
if surrendered:
    so = to_object(SPAWNED_ID)
    target_pos(SPAWNED_ID, so.spawn_pos.x, so.spawn_pos.y, so.spawn_pos.z)
    # TODO: When it reaches spawn_pos tally and remove
    ->END


#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"), 5000)
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)

#
# Comms enraged this npc, But enraged is time limited
#
the_target = None
if enraged is not None:
    # if still enraged, use its target
    clear = True
    if not is_timer_finished(SPAWNED_ID, "enrage_timer"):
        the_target = enraged
        if object_exists(enraged):
            clear = False           
        else:
            clear = True
            the_target = None
    if clear:
        # clear the enraged value
        set_inventory_value(SPAWNED_ID, "enrage_target", None)
        clear_timer(SPAWNED_ID, "enrage_timer")

#
# Look for a station near 
#
if the_target is None:
    the_target = closest(SPAWNED_ID, role("Station") & role("tsn"), 3000)

#
# Look for a player near 
#
if the_target is None:
    the_target = closest(SPAWNED_ID, role("PlayerShip"), 3000)

#
# Otherwise look for a tsn station
#
if the_target is None:
    the_target = closest(SPAWNED_ID, role("Station") & role("tsn"))
#
# If any of these check resulted in a target
#
if the_target is not None:

    distance = sbs.distance_id(SPAWNED_ID, to_id(the_target))
    throt = 1
    if distance < 500:
        throt = 0

    target(SPAWNED_ID, the_target, True, throt)
#
# Call this logic again in 5 seconds
#
await delay_sim(seconds=5)
-> task_npc_targeting



#
# AI for friendly tsn ships (not citizen ships)
#
========== ai_task_friendly ===== 

#
# Comms can give orders to attack a target (or approach another friendly) 
#
the_target = get_inventory_value(SPAWNED_ID, "TARGET_ID", None)

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"), 5000)
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)

#
# Only shoot raiders
#            
if the_target is not None:
    shoot = has_role(the_target, "raider")

    distance = sbs.distance_id(SPAWNED_ID,to_id(the_target))
    throt = 1
    if distance < 500:
    throt = 0

    target(SPAWNED_ID, the_target, shoot, throt)



#
# call this logic every 5 seconds
#
await delay_sim(seconds=5)
-> ai_task_friendly

================ spawn_task_station ================= 

#
# All stations start building homing, just us any player
# Build task needs a player to talk to
#
my_players = role("__player__") & role("tsn")
->END if len(my_players)==0
ship_id = next(iter(my_players))
station_id = SPAWNED_ID

torpedo_build_type = sbs.TORPEDO.HOMING
build_time = 3*60
task_cancel(build_task) 
build_task = task_schedule(task_station_building)


-> END

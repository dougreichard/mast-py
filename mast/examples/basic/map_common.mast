################
## common code for different map type


#
#
# Example embedded python this may not be supported long term
# This is limited only to the things mast can see
# i.e. you cannot import other modules
#
#~~~~
#@export
#def test_func(x,y,z, art_id):
#    pu = terrain_spawn(0,0,0, None, None, art_id, "behav_pickup")
#    blob = pu.blob
#    if blob is not None:
#        print(f"Blobby {x}")
#~~~~


=========== spawn_friendly_npc ===========

match friendly_select:
    case "many":
        max_hull_points=10
    case "lots":
        max_hull_points=8
    case "some":
        max_hull_points=5
    case "few":
        max_hull_points=3
    case "none":
        # no civilian or friendly npcs
        # But added eyes
        jump add_eye_to_players
end_match

total_hull_points = 0

attempts = 0

# grab the ship data for all ships on TSN side
tsn_ship_data = names_filter_ship_data_by_side(None, "TSN", "support", ret_key_only=False)
# pick a random tsn ship
count = 1

spawn_points = scatter_sphere(100, 0,0,0, 500, 5000, ring=True)
for x while total_hull_points<max_hull_points:
    #
    ship = random.choice(tsn_ship_data)

    hull_points = ship["hullpoints"]

    if hull_points+total_hull_points > max_hull_points:
        attempts += 1
        # failed to find a small enough ship
        if attempts > 20:
            break
        end_if
        #
        # try again
        continue
    end_if
    # reset attempts
    attempts = 0
    # OK add this ship
    spawn_point = next(spawn_points)
    friend = to_id(npc_spawn(*spawn_point, f"tsn {str(count).zfill(2)}", "tsn, friendly", ship["key"], "behav_npcship"))
    count += 1
    total_hull_points += hull_points
    set_face(friend, random_terran())
next x

civilian_count = 0
match friendly_select:
    case "many":
        civilian_count = 4
    case "lots":
        civilian_count = 3
    case "some":
        civilian_count = 2
    case "few":
        civilian_count = 1
    case "none":
        ->RETURN
end_match

# grab the ship data for all ships on TSN side
civilian_data = names_filter_ship_data_by_side(None, None, "civilian", ret_key_only=False)
->END if len(civilian_data)==0
count = 1
for pos in scatter_sphere(civilian_count, 0,0,0, 500, 5000, ring=True):
    #
    ship = random.choice(civilian_data)

    friend = to_id(npc_spawn(*pos, f"civ {str(count).zfill(2)}", "tsn, friendly, civilian", ship["key"], "behav_npcship"))
    set_face(friend, random_terran(civilian=True))
    count += 1
next x

#### vvvvvvv  ###

========= add_eye_to_players =====

my_players = role("__player__") & role("tsn")
for player in my_players:
    ship_id = player
    blob = to_blob(player)
    num_ids = blob.get("num_extra_scan_sources",0)

    for friend in any_role("friendly, station"):
        blob.set("extra_scan_source", friend, num_ids)
        num_ids += 1
        follow_route_science_select(player, friend)
    next friend

    blob.set("num_extra_scan_sources",num_ids,0)
next player

->END



====== spawn_players =======
c=0
first = True

#test_func(3)

#------------------------------------------------------------------------------------------------------------
for player_ship_data in player_list:
    if c>= player_count:
        # make sure the id is cleared dry docked ships
        player_ship_data.id = None
        continue
    end_if

    player_ship = to_id(player_spawn(*player_ship_data.spawn_point, player_ship_data.name, player_ship_data.side, player_ship_data.ship))
    # player_ship = to_id(player_spawn(*player_ship_data.spawn_point, player_ship_data.name, player_ship_data.side, "tsn_light_cruiser"))
    c+=1
    player_ship_data.id = player_ship

    set_face(player_ship, player_ship_data.face)
    set_inventory_value(player_ship, "respawn_time", 5)
    if first:
        assign_client_to_ship(0,player_ship)
        first = False
    end_if
    points = get_open_grid_points(player_ship)
next player_ship_data
->END
    
    
        

route comms select route_comms

#
# Load data from a file
#
taunt_data = load_json_data(get_mission_dir_filename("taunts.json"))

#############################################
# Create task to player to raider comms and station comms
#############################################

=========== route_comms  ========
# start the comms for the players and stations
# Each ship will have its of thread for comms
# this enables them to have a unique path

if COMMS_SELECTED_ID == COMMS_ORIGIN_ID:
    # This is the same ship
    jump internal_comms
elif has_roles(COMMS_SELECTED_ID, "tsn, Station"):
    torpedo_build_type = sbs.TORPEDO.HOMING
    jump station_comms
elif has_roles(COMMS_SELECTED_ID, "tsn, friendly"):
    jump friendly_comms
elif has_roles(COMMS_SELECTED_ID, 'Station'):
    jump comms_enemy_station
elif has_role(COMMS_SELECTED_ID, "Raider"):
    jump npc_comms
end_if

# Default clear comms Present static
comms_info "static"

->END

===== friendly_comms =======

await comms:
    + "Give Orders":
        comms_client_id = EVENT.client_id
        reroute client comms_client_id friendly_give_orders
end_await
jump  friendly_comms


=============== station_comms ===============
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
self = to_object(COMMS_SELECTED_ID)

await comms:
    + "Hail":
        homing = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.HOMING)
        nuke = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.NUKE)
        emp = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.EMP)
        mine = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.MINE)
        receive """Hello, {comms_id}.  We stand ready to assist.
You have full docking privileges.
{homing} Homing ready
{nuke} Nuke ready
{emp} EMP ready
{mine} Mine ready
{torpedo_build_type} in production.
"""
    + "Now Docking":
        receive  """We read you, {comms_id}.  We're standing by for expedited docking.^"""

    + "Hello, world":
        receive  """Hello, World"""

    + "Build Homing": 
        receive  """We read you, {comms_id}.  We will focus on homing production.^"""
        torpedo_build_type = sbs.TORPEDO.HOMING
        cancel build_task
        var build_task =>  task_station_building

    + "Build Nuke":
        receive  """We read you, {comms_id}.  We will focus on nuke production.^"""
        torpedo_build_type= sbs.TORPEDO.NUKE
        cancel build_task
        var build_task => task_station_building

    + "Build Emp":
        receive  """We read you, {comms_id}.  We will focus on EMP production.^"""
        torpedo_build_type= sbs.TORPEDO.EMP
        cancel build_task
        var build_task => task_station_building
    + "Build Mine":
        receive  """We read you, {comms_id}.  We will focus on MINE production.^"""
        torpedo_build_type = sbs.TORPEDO.MINE
        cancel build_task
        var build_task => task_station_building
end_await
-> station_comms

=== task_station_building ===
delay sim 10s
self = to_object(COMMS_SELECTED_ID)
#
# If the station was destroyed  END
#
->END if self is None

cur_count = get_engine_data(sim, COMMS_SELECTED_ID, "torpedo_count", torpedo_build_type)
do set_engine_data(sim, COMMS_SELECTED_ID, "torpedo_count", cur_count+1, torpedo_build_type)

receive  """{comms_id}. {torpedo_build_type} Production complete."""
->task_station_building


======== comms_enemy_station ====== 
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
await comms:
    + "Hail":
        receive "{comms_id}! We will destroy you, disgusting Terran scum!"
    + "You're Ugly":
        receive  """You are a foolish Terran, {comms_id}.  Taunting enemy stations is not currently implemented.^"""
    + "Surrender now":
        receive """Eat my soiled undergarments, {comms_id}."""
end_await

-> comms_enemy_station


================ npc_comms ==================
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
enrage_value=get_inventory_value(COMMS_SELECTED_ID, "enrage_value")
hide_butt = has_role(COMMS_SELECTED_ID, "never_surrender") or has_role(COMMS_SELECTED_ID, "surrendered")
await comms:
    + "Hail":
        receive "{comms_id}! Make your time!"
    + "Taunt" if enrage_value is None and not hide_butt:
        # Navigate to sub Menu
        jump comms_taunts
    + "Surrender now" if not hide_butt:
        blob = get_engine_data_set(sim, COMMS_SELECTED_ID)
        shield_count = blob.get("shield_count", 0)
        s_ratio = 100
        for s in range(shield_count):
            s_max = blob.get("shield_max_val", s )
            s_cur = blob.get("shield_val", s )
            s_ratio = min(s_cur/s_max, s_ratio)
        next s
        if s_ratio < 0.09:
            if random.randint(1,6)<3:
                receive """OK we give up, {comms_id}."""
                do add_role(COMMS_SELECTED_ID, "surrendered")
                do game_stats["ships_surrender"] += 1
                do remove_role(COMMS_SELECTED_ID, "raider")

                do set_engine_data(sim, COMMS_SELECTED_ID, "surrender_flag", 1)
            else:
                receive """We will fight to our last breath!"""
                do add_role(COMMS_SELECTED_ID, "never_surrender")
            end_if
        elif s_ratio < 0.5:
            if random.randint(0,6)<=2:
                receive """OK we give up, {comms_id}."""
                do add_role(COMMS_SELECTED_ID, "surrendered")
                do remove_role(COMMS_SELECTED_ID, "raider")
                do set_engine_data(sim, COMMS_SELECTED_ID, "surrender_flag", 1)
            else:
                receive """We can still defeat you, {comms_id}! Prepare to die!"""
            end_if
        else:
            receive """Go climb a tree, {comms_id}!"""
        end_if
        
end_await
jump npc_comms



================ comms_taunts ==================

#
# Skip if the loading of taunts failed
#
->END if taunt_data is None

races = ["kralien", "arvonian", "torgoth", "skaraan", "ximni"]
race = None
for test in races:
    if has_role(COMMS_SELECTED_ID, test):
        race = test
        break
    end_if
next test
if race is None:
    # No Taunt for you
    jump npc_comms 
end_if
#
# Present taunts
#
name = to_object(COMMS_ORIGIN_ID).name
taunt_trait=get_inventory_value(COMMS_SELECTED_ID, "taunt_trait")

right_button = taunt_data[race][taunt_trait]['button']
enrage_value=0
await comms:
    + "{data['button']}" for data in taunt_data[race]:
        # Need to format the data
       msg = data['transmit']
       msg = "{msg}"
       transmit "{msg}"
        # failure
        if right_button != data['button']:
            msg = "{data['failure']}"
            receive  "{msg}"
        # success
        else:
            msg = "{data['success']}"
            receive  "{msg}"
            enrage_value=sim.time_tick_counter+30*120
        end_if
    + "Back":
        -> npc_comms    
end_await
do set_inventory_value(COMMS_SELECTED_ID, "enrage_value",(enrage_value, COMMS_ORIGIN_ID))
# Jump back to main comms menu
-> npc_comms


================ internal_comms ==================
#
# Setup faces for the departments
#
doctor = random_terran()
biologist = random_terran()
counselor = random_terran()
major = random_terran()
sec = "Security"

================ internal_comms_loop ==================
#
# Shows button color, face and title overrides
#
await comms:
    + "Sickbay" color "blue":
        receive "The crew health is great!" title "sickbay" face "{doctor}" color "blue"
    + "Security" color "red":
        receive  "All secure" title sec face major color "red"
    + "Exobiology" color "green":
        receive  "Testing running, one moment" title "Exobiology" face biologist color "green"
        # It is best to schedule delayed responses so the comms buttons are not stalled
        schedule test_finished
    + "counselor" color "cyan":
        receive  "Something is disturbing the crew" title "counselor" face counselor color "cyan"
        #
        # but you can delay comms, There will be no buttons during this delay
        #
        delay sim 3s
        receive  "Things feel like they are getting worse" title "counselor" face counselor color "cyan"
end_await
-> internal_comms_loop

====== test_finished ======
# This is a new task to delay the response of the test results
# COMMS variables should migrate to this task

delay sim 2s
receive  "test results finished. Tell the captain we have a pathogen. This could be bad." title "Exobiology" face biologist color "green"
->END

